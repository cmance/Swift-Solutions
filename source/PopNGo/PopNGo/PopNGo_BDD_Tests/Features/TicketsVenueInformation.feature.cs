// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PopNGo_BDD_Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Tickets and Venue information on the event cards in the explore page")]
    [NUnit.Framework.CategoryAttribute("Cameron")]
    public partial class TicketsAndVenueInformationOnTheEventCardsInTheExplorePageFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Cameron"};
        
#line 1 "TicketsVenueInformation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Tickets and Venue information on the event cards in the explore page", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Visitor clicks on the event card")]
        [NUnit.Framework.CategoryAttribute("EventCards")]
        public async System.Threading.Tasks.Task VisitorClicksOnTheEventCard()
        {
            string[] tagsOfScenario = new string[] {
                    "EventCards"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Visitor clicks on the event card", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await testRunner.GivenAsync("the visitor navigates to the explore page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
    await testRunner.WhenAsync("the visitor clicks on any event card", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
    await testRunner.ThenAsync("the visitor should see a modal with a \"View Venue\" and \"Buy Tickets\" button", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Visitor clicks on the \"View Venue\" button")]
        [NUnit.Framework.CategoryAttribute("Venue")]
        public async System.Threading.Tasks.Task VisitorClicksOnTheViewVenueButton()
        {
            string[] tagsOfScenario = new string[] {
                    "Venue"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Visitor clicks on the \"View Venue\" button", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 12
    await testRunner.GivenAsync("the visitor navigates to the explore page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 13
    await testRunner.WhenAsync("the visitor clicks on any event card", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
    await testRunner.AndAsync("the visitor clicks on the \"View Venue\" button", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.ThenAsync("the visitor should be shown the venue information modal", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Visitor clicks on the \"Buy Tickets\" button")]
        [NUnit.Framework.CategoryAttribute("Tickets")]
        public async System.Threading.Tasks.Task VisitorClicksOnTheBuyTicketsButton()
        {
            string[] tagsOfScenario = new string[] {
                    "Tickets"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Visitor clicks on the \"Buy Tickets\" button", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
    await testRunner.GivenAsync("the visitor navigates to the explore page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 21
    await testRunner.WhenAsync("the visitor clicks on any event card", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
    await testRunner.AndAsync("the visitor clicks on the \"Buy Tickets\" button", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
    await testRunner.ThenAsync("the visitor should activate a dropdown with ticket options or the button will be " +
                        "disabled if no ticket options are available", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Visitor hovers over the \"Buy Tickets\" button")]
        [NUnit.Framework.CategoryAttribute("Tickets")]
        public async System.Threading.Tasks.Task VisitorHoversOverTheBuyTicketsButton()
        {
            string[] tagsOfScenario = new string[] {
                    "Tickets"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Visitor hovers over the \"Buy Tickets\" button", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 27
    await testRunner.GivenAsync("the visitor navigates to the explore page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 28
    await testRunner.WhenAsync("the visitor clicks on any event card", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
    await testRunner.AndAsync("the visitor hovers over the \"Buy Tickets\" button", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
    await testRunner.ThenAsync("the button should have a button title appear", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Visitor hovers over the \"View Venue\" button")]
        [NUnit.Framework.CategoryAttribute("Venue")]
        public async System.Threading.Tasks.Task VisitorHoversOverTheViewVenueButton()
        {
            string[] tagsOfScenario = new string[] {
                    "Venue"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Visitor hovers over the \"View Venue\" button", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 34
    await testRunner.GivenAsync("the visitor navigates to the explore page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 35
    await testRunner.WhenAsync("the visitor clicks on any event card", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
    await testRunner.AndAsync("the visitor hovers over the \"View Venue\" button", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
    await testRunner.ThenAsync("the button should have a button title appear", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
